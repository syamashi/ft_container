
--- [1]:map_insert_test ---
--- M.insert({0,0}) ---
 size:1
 ret:0,0 1

--- M.insert({-1,-1}) ---
 size:2
 ret:-1,-1 1

--- M.insert({-2,-2}) ---
 size:3
 ret:-2,-2 1

--- M.insert({-3,-3}) ---
 size:4
 ret:-3,-3 1

--- M.insert({-4,-4}) ---
 size:5
 ret:-4,-4 1

--- M.insert({-5,-5}) ---
 size:6
 ret:-5,-5 1

--- M.insert({-6,-6}) ---
 size:7
 ret:-6,-6 1

--- M.insert({-7,-7}) ---
 size:8
 ret:-7,-7 1

--- M.insert({-8,-8}) ---
 size:9
 ret:-8,-8 1

--- M.insert({-9,-9}) ---
 size:10
 ret:-9,-9 1

--- M.insert({-10,-10}) ---
 size:11
 ret:-10,-10 1

--- M.insert({-11,-11}) ---
 size:12
 ret:-11,-11 1

--- M.insert({-12,-12}) ---
 size:13
 ret:-12,-12 1

--- M.insert({-13,-13}) ---
 size:14
 ret:-13,-13 1

--- M.insert({-14,-14}) ---
 size:15
 ret:-14,-14 1

--- M.insert({-15,-15}) ---
 size:16
 ret:-15,-15 1

--- M.insert({-16,-16}) ---
 size:17
 ret:-16,-16 1

--- M.insert({-17,-17}) ---
 size:18
 ret:-17,-17 1

--- M.insert({-18,-18}) ---
 size:19
 ret:-18,-18 1

--- M.insert({-19,-19}) ---
 size:20
 ret:-19,-19 1


--- [2]:map_value_compare_test ---
1
0

--- [3]:map_operator_equal_test ---
Initially:
---nums1---
size:10
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4
M[5]:5
M[6]:6
M[7]:7
M[8]:8
M[9]:9

---nums2---
size:0

After assigment:
---nums1---
size:10
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4
M[5]:5
M[6]:6
M[7]:7
M[8]:8
M[9]:9

---nums2---
size:10
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4
M[5]:5
M[6]:6
M[7]:7
M[8]:8
M[9]:9


--- [4]:map_all_erase_test ---
ins:0
size:5
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4

ers:0
size:0

ins:1
size:5
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4

ers:1
size:0

ins:2
size:5
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4

ers:2
size:0

ins:3
size:5
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4

ers:3
size:0

ins:4
size:5
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4

ers:4
size:0


--- [5]:map_get_alloc_test ---
1

--- [6]:map_at_test ---
a
exception std::out_of_range
a
exception std::out_of_range

--- [7]:map_insert_iterator_test ---
---M.insert(M.end(), {4,2})---
ret[4]:4
size:10
M[0]:0
M[2]:2
M[4]:4
M[6]:6
M[8]:8
M[10]:10
M[12]:12
M[14]:14
M[16]:16
M[18]:18

---M.insert(M.begin(), {4,2})---
ret[4]:4
size:10
M[0]:0
M[2]:2
M[4]:4
M[6]:6
M[8]:8
M[10]:10
M[12]:12
M[14]:14
M[16]:16
M[18]:18

---M.insert(M.end(), {5,2})---
ret[5]:2
size:11
M[0]:0
M[2]:2
M[4]:4
M[5]:2
M[6]:6
M[8]:8
M[10]:10
M[12]:12
M[14]:14
M[16]:16
M[18]:18

---M.insert(M.begin(), {7,2})---
ret[7]:2
size:12
M[0]:0
M[2]:2
M[4]:4
M[5]:2
M[6]:6
M[7]:2
M[8]:8
M[10]:10
M[12]:12
M[14]:14
M[16]:16
M[18]:18


--- [8]:map_insert_iterator_iterator_test ---
size:20
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4
M[5]:5
M[6]:6
M[7]:7
M[8]:8
M[9]:9
M[10]:10
M[11]:11
M[12]:12
M[13]:13
M[14]:14
M[15]:15
M[16]:16
M[17]:17
M[18]:18
M[19]:19

size:20
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4
M[5]:5
M[6]:6
M[7]:7
M[8]:8
M[9]:9
M[10]:10
M[11]:11
M[12]:12
M[13]:13
M[14]:14
M[15]:15
M[16]:16
M[17]:17
M[18]:18
M[19]:19


--- [9]:map_operator_kakko_test ---
size:6
M[0]:0
M[1]:0
M[2]:0
M[3]:3
M[4]:4
M[5]:5

size:10
M[0]:100
M[1]:101
M[2]:102
M[3]:103
M[4]:104
M[5]:105
M[6]:106
M[7]:107
M[8]:108
M[9]:109

The magnitude of (1, 1) is 1.41421
The magnitude of (2, 2) is 2.82843
The magnitude of (3, 3) is 4.24264
The magnitude of (1, 1.41421) is 1.73205
The magnitude of (2, 2.82843) is 3.4641
The magnitude of (3, 4.24264) is 5.19615
The magnitude of (1, 1.41421) is 1.73205
The magnitude of (2, 2.82843) is 3.4641
The magnitude of (3, 4.24264) is 5.19615
The magnitude of (1, 1.73205) is const
The magnitude of (2, 3.4641) is const
The magnitude of (3, 5.19615) is const

--- [10]:map_rbegin_test ---
US coins in circulation, largest to smallest denomination:
     dollar = ¢100
half_dollar = ¢50
    quarter = ¢25
       dime = ¢10
     nickel = ¢5
      penny = ¢1
US coins in circulation, largest to smallest denomination:
     dollar = ¢100
half_dollar = ¢50
    quarter = ¢25
       dime = ¢10
     nickel = ¢5
      penny = ¢1

--- [11]:map_empty_test ---
ins:1 size:0
ers:1 size:0
ins:0 size:1
ers:1 size:0
ins:0 size:2
ers:1 size:0
ins:0 size:3
ers:1 size:0
ins:0 size:4
ers:1 size:0

--- [12]:map_max_size_test ---
int:461168601842738790
char:461168601842738790

--- [13]:map_clear_test ---
ins:0
size:0

clear
size:0

ins:1
size:1
M[-100]:-100

clear
size:0

ins:2
size:2
M[-100]:-100
M[-99]:-99

clear
size:0

ins:3
size:3
M[-100]:-100
M[-99]:-99
M[-98]:-98

clear
size:0

ins:4
size:4
M[-100]:-100
M[-99]:-99
M[-98]:-98
M[-97]:-97

clear
size:0


--- [14]:map_erase_test ---
M.erase(0)
size:4
M[1]:1
M[2]:2
M[3]:3
M[4]:4

M.erase(1)
size:3
M[2]:2
M[3]:3
M[4]:4

M.erase(2)
size:2
M[3]:3
M[4]:4

M.erase(3)
size:1
M[4]:4

M.erase(4)
size:0

M.erase(0,0)
size:5
M[0]:0
M[1]:1
M[2]:2
M[3]:3
M[4]:4

M.erase(0,1)
size:4
M[1]:1
M[2]:2
M[3]:3
M[4]:4

M.erase(0,2)
size:3
M[2]:2
M[3]:3
M[4]:4

M.erase(0,3)
size:2
M[3]:3
M[4]:4

M.erase(0,4)
size:1
M[4]:4

M.erase(4,M.end())
size:4
M[0]:0
M[1]:1
M[2]:2
M[3]:3

M.erase(3,M.end())
size:3
M[0]:0
M[1]:1
M[2]:2

M.erase(2,M.end())
size:2
M[0]:0
M[1]:1

M.erase(1,M.end())
size:1
M[0]:0

M.erase(0,M.end())
size:0


--- [15]:map_swap_test ---
alice.swap(blank)
alice
size:1
M[1]:z

size:3
M[1]:a
M[2]:b
M[3]:c

alice.swap(blank)
alice
size:3
M[1]:a
M[2]:b
M[3]:c

size:1
M[1]:z

blank.swap(alice)
alice
size:3
M[1]:a
M[2]:b
M[3]:c

size:1
M[1]:z

blank.swap(alice)
alice
size:3
M[1]:a
M[2]:b
M[3]:c

size:1
M[1]:z

std::swap(alice, blank)
alice
size:1
M[1]:z

size:3
M[1]:a
M[2]:b
M[3]:c

std::swap(alice, blank)
alice
size:3
M[1]:a
M[2]:b
M[3]:c

size:1
M[1]:z

alice
size:3
M[1]:a
M[2]:b
M[3]:c

bob
size:4
M[7]:Z
M[8]:Y
M[9]:X
M[10]:W

alice
size:4
M[7]:Z
M[8]:Y
M[9]:X
M[10]:W

bob
size:3
M[1]:a
M[2]:b
M[3]:c

std::swap(alice, bob)
alice
size:3
M[1]:a
M[2]:b
M[3]:c

bob
size:4
M[7]:Z
M[8]:Y
M[9]:X
M[10]:W

alice.swap(bob)
alice
size:4
M[7]:Z
M[8]:Y
M[9]:X
M[10]:W

bob
size:3
M[1]:a
M[2]:b
M[3]:c

bob.swap(alice)
alice
size:3
M[1]:a
M[2]:b
M[3]:c

bob
size:4
M[7]:Z
M[8]:Y
M[9]:X
M[10]:W


--- [16]:map_find_test ---
M[0]:0 count:1
M[1]:1 count:1
M[2]:2 count:1
M[3]:end() count:0
M[4]:end() count:0
M[0]:0 count:1
M[1]:1 count:1
M[2]:2 count:1
M[3]:end() count:0
M[4]:end() count:0

--- [17]:map_equal_range_test ---
m[1] = one
end of equal_range (p.second) is one-past p.first
pp.first is iterator to first not-less than -1
pp.second is iterator to first element greater-than -1
ppp.first is iterator to first not-less than 3
ppp.second is iterator to first element greater-than 3

--- [18]:map_copy_construct_test ---
size:3
M[0]:zero
M[1]:one
M[2]:two

size:3
M[0]:zero
M[1]:one
M[2]:two

size:3
M[0]:zero
M[1]:one
M[2]:two

M.lower_bound(0):3
M.lower_bound(1):3
M.lower_bound(2):3
M.lower_bound(3):3
M.lower_bound(4):4
M.lower_bound(5):5
M.lower_bound(6):6
M.lower_bound(7):7
M.lower_bound(8):end()
M.lower_bound(9):end()
M.upper_bound(0):3
M.upper_bound(1):3
M.upper_bound(2):3
M.upper_bound(3):4
M.upper_bound(4):5
M.upper_bound(5):6
M.upper_bound(6):7
M.upper_bound(7):end()
M.upper_bound(8):end()
M.upper_bound(9):end()
CM.lower_bound(0):3
CM.lower_bound(1):3
CM.lower_bound(2):3
CM.lower_bound(3):3
CM.lower_bound(4):4
CM.lower_bound(5):5
CM.lower_bound(6):6
CM.lower_bound(7):7
CM.lower_bound(8):end()
CM.lower_bound(9):end()
CM.upper_bound(0):3
CM.upper_bound(1):3
CM.upper_bound(2):3
CM.upper_bound(3):4
CM.upper_bound(4):5
CM.upper_bound(5):6
CM.upper_bound(6):7
CM.upper_bound(7):end()
CM.upper_bound(8):end()
CM.upper_bound(9):end()
alice == bob returns false
alice != bob returns true
alice <  bob returns true
alice <= bob returns true
alice >  bob returns false
alice >= bob returns false

alice == eve returns true
alice != eve returns false
alice <  eve returns false
alice <= eve returns true
alice >  eve returns false
alice >= eve returns true
