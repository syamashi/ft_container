
--- [1]:alloc_test ---
size:0 capacity:0
{ }
size:5 capacity:5
{ 123 123 123 123 123 }
size:5 capacity:5
{ 100 123 123 123 123 }
size:5 capacity:5
{ 123 123 123 123 123 }
size:5 capacity:5
{ 123 123 123 123 123 }

--- [2]:traits_reverse ---
size:5 capacity:8
{ 4 3 2 1 0 }

--- [3]:traits_advance ---
The sixth element in mylist is: 50
The three element in mylist is: 20

--- [4]:traits_backinserter ---
foo contains: 1 2 3 4 5 10 20 30 40 50

--- [5]:traits_frontinserter ---
foo contains: 50 40 30 20 10 1 2 3 4 5

--- [6]:traits_inserter ---
foo contains: 1 2 3 10 20 30 40 50 4 5

--- [7]:reverse_iterator ---
{5 4 3 2 1 0}

--- [8]:rit_operator= ---
2

--- [9]:rit_base ---
*it == 3
*r_it == 2
*r_it.base() == 3
*(r_it.base()-1) == 2
0 1 2 3 4 5 
5 4 3 2 1 0 

--- [10]:rit_op_ref ---
*r0 = 3
vi[3] = 42
*r1 = 1

--- [11]:rit_op_block ---
3 2 1 0 

--- [12]:rit_ops ---
3 4 1 1 4

--- [13]:rit_nonmember_ops ---
*x == 3
*y == 3
*z == 2
x == y ? true
x != y ? false
x <  y ? false
x <= y ? true
x == z ? false
x != z ? true
x <  z ? true
x <= z ? true

--- [14]:rit_nonmember_op_plus ---
3 1 
--- [15]:rit_nonmember_op_minus ---
4 -4

--- [16]:is_integral_test ---

--- [17]:vector_construct_iter_iter_test ---
size:3 capacity:3
{ 5 5 5 }
size:3 capacity:3
{ 5 5 5 }

--- [18]:vector_copy_constructer ---
size:3 capacity:3
{ 1 1 1 }
size:3 capacity:3
{ 1 1 1 }

--- [19]:vector_assign_test ---
size:5 capacity:5
{ a a a a a }
size:6 capacity:6
{ b b b b b b }
size:3 capacity:6
{ c c c }
size:0 capacity:6
{ }
size:10 capacity:10
{ e e e e e e e e e e }

--- [20]:vector_at_test ---
test data init 1,2,4,4,5,6
size:6 capacity:8
{ 1 2 4 4 5 6 }
Element at index 2 has value 4
size:6 capacity:8
{ 1 88 4 4 5 6 }

--- [21]:vector_operator[]_test ---
Second element: 4
size:4 capacity:4
{ 5 4 6 8 }

--- [22]:vector_front_test ---
The first character is 'o'.

--- [23]:vector_back_test ---
The last character is 'f'.

--- [24]:vector_data_test ---
data = 1 2 3 4 

--- [25]:vector_begin_test ---
1 2 4 8 16 
Sum of nums: 31
First fruit: orange
vector 'empty' is indeed empty.

--- [26]:vector_rbegin_test ---
16 8 4 2 1 
Sum of nums: 31
First fruit: raspberry
vector 'empty' is indeed empty.

--- [27]:vector_empty_test ---
Initially, numbers.empty(): true
After adding elements, numbers.empty(): false

--- [28]:vector_max_size_test ---
Maximum size of a 'vector' is 18446744073709551615
Maximum size of a 'vector' is 4611686018427387903

--- [29]:vector_reserve_test ---
size:5 capacity:8
{ 0 1 2 3 4 }
size:5 capacity:8
{ 0 1 2 3 4 }
size:0 capacity:0
{ }
size:0 capacity:10000
{ }
size:3 capacity:4
{ 0 1 2 }
size:3 capacity:10000
{ 0 1 2 }

--- [30]:vector_capacity_test ---
initial capacity=0
new capacity=1
new capacity=2
new capacity=4
new capacity=8
new capacity=16
new capacity=32
new capacity=64
new capacity=128
new capacity=256
final size=200
final capacity=256

--- [31]:void vector_clear_test ---
Before clear:size:3 capacity:3
{ 1 2 3 }
Clear
After clear:size:0 capacity:3
{ }

--- [32]:vector_insert_test ---
size:3 capacity:3
{ 100 100 100 }
size:4 capacity:6
{ 200 100 100 100 }
size:6 capacity:6
{ 300 300 200 100 100 100 }
size:8 capacity:12
{ 300 300 400 400 200 100 100 100 }
size:10 capacity:12
{ 501 502 300 300 400 400 200 100 100 100 }

--- [33]:vector_erase_test ---
size:10 capacity:10
{ 0 1 2 3 4 5 6 7 8 9 }
size:9 capacity:10
{ 1 2 3 4 5 6 7 8 9 }
size:6 capacity:10
{ 1 2 6 7 8 9 }
size:3 capacity:10
{ 1 7 9 }
size:2 capacity:10
{ 7 9 }
size:1 capacity:10
{ 9 }
size:0 capacity:10
{ }

--- [34]:vector_pop_back_test ---
size:3 capacity:4
{ 5 3 4 }
size:2 capacity:4
{ 5 3 }
size:1 capacity:4
{ 5 }
size:0 capacity:4
{ }

--- [35]:vector_resize_test ---
size:0 capacity:0
{ }
size:5 capacity:5
{ 0 0 0 0 0 }
size:10 capacity:10
{ 0 0 0 0 0 10 10 10 10 10 }
size:1 capacity:10
{ 0 }
size:5 capacity:5
{ 1 2 3 4 5 }
size:10 capacity:10
{ 1 2 3 4 5 0 0 0 0 0 }

--- [36]:vector_swap_test ---
size:3 capacity:3
{ 1 2 3 }
size:2 capacity:2
{ 4 5 }
2 5 1 4

size:2 capacity:2
{ 4 5 }
size:3 capacity:3
{ 1 2 3 }
2 5 1 4
size:2 capacity:2
{ 4 5 }
size:3 capacity:3
{ 1 2 3 }
2 5 1 4

--- [37]:vector_nonmember_operator_test ---
alice == bob returns false
alice != bob returns true
alice <  bob returns true
alice <= bob returns true
alice >  bob returns false
alice >= bob returns false

alice == eve returns true
alice != eve returns false
alice <  eve returns false
alice <= eve returns true
alice >  eve returns false
alice >= eve returns true

--- [38]:vector_nonmember_swap_test ---
alice:size:3 capacity:3
{ 1 2 3 }

bob  :size:4 capacity:4
{ 7 8 9 10 }

-- SWAP
alice:size:4 capacity:4
{ 7 8 9 10 }

bob  :size:3 capacity:3
{ 1 2 3 }


--- [39]:stack_constructer_test ---
size of first: 0
size of third: 0
size of fourth: 2

--- [40]:stack_empty_test ---
total: 55

--- [41]:stack_size_test ---
0. size: 0
1. size: 5
2. size: 4

--- [42]:stack_top_test ---
mystack.top() is now 15

--- [43]:stack_push_test ---
Popping out elements... 4 3 2 1 0

--- [44]:stack_nonmember_operator_test ---
alice == bob returns false
alice != bob returns true
alice <  bob returns true
alice <= bob returns true
alice >  bob returns false
alice >= bob returns false

alice == eve returns true
alice != eve returns false
alice <  eve returns false
alice <= eve returns true
alice >  eve returns false
alice >= eve returns true
